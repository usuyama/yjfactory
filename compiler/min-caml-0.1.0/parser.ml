type token =
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
# 3 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
# 39 "parser.ml"
let yytransl_const = [|
  259 (* NOT *);
  260 (* MINUS *);
  261 (* PLUS *);
  262 (* MINUS_DOT *);
  263 (* PLUS_DOT *);
  264 (* AST_DOT *);
  265 (* SLASH_DOT *);
  266 (* EQUAL *);
  267 (* LESS_GREATER *);
  268 (* LESS_EQUAL *);
  269 (* GREATER_EQUAL *);
  270 (* LESS *);
  271 (* GREATER *);
  272 (* IF *);
  273 (* THEN *);
  274 (* ELSE *);
  276 (* LET *);
  277 (* IN *);
  278 (* REC *);
  279 (* COMMA *);
  280 (* ARRAY_CREATE *);
  281 (* DOT *);
  282 (* LESS_MINUS *);
  283 (* SEMICOLON *);
  284 (* LPAREN *);
  285 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  275 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\007\000\007\000\004\000\004\000\005\000\005\000\006\000\
\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\005\000\001\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\006\000\002\000\003\000\003\000\003\000\003\000\006\000\
\005\000\002\000\001\000\008\000\007\000\003\000\003\000\001\000\
\004\000\002\000\001\000\002\000\001\000\003\000\003\000\003\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\032\000\003\000\004\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\034\000\000\000\000\000\041\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\014\000\015\000\048\000\042\000\016\000\050\000\074\000"

let yysindex = "\255\255\
\003\255\000\000\000\000\000\000\000\000\003\255\003\255\003\255\
\003\255\000\000\254\254\126\255\149\255\041\003\241\254\248\254\
\126\255\126\255\126\255\185\002\006\255\002\255\005\255\027\255\
\000\000\178\255\003\255\003\255\003\255\003\255\003\255\003\255\
\003\255\003\255\003\255\003\255\003\255\003\255\003\255\003\255\
\000\255\126\255\019\255\003\255\003\255\003\255\029\255\032\255\
\031\255\235\254\028\255\000\255\000\000\211\001\211\001\211\001\
\211\001\126\255\126\255\110\003\110\003\110\003\110\003\110\003\
\110\003\094\003\041\003\000\255\003\255\094\003\213\002\241\002\
\029\255\047\255\003\255\039\255\041\255\052\255\003\255\207\255\
\003\255\003\255\000\000\003\255\041\003\000\000\000\000\003\255\
\156\002\038\255\069\003\041\003\041\003\013\003\000\000\003\255\
\003\255\069\003\041\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\030\000\146\000\
\172\000\198\000\224\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\059\000\250\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\088\000\000\000\079\001\108\001\137\001\
\166\001\021\001\050\001\188\001\214\001\240\001\010\002\037\002\
\066\002\080\002\024\002\117\000\000\000\087\002\000\000\000\000\
\060\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\002\000\000\000\000\000\000\
\000\000\001\000\101\002\103\002\050\255\000\000\000\000\000\000\
\000\000\116\002\130\002"

let yygindex = "\000\000\
\005\000\049\000\000\000\000\000\000\000\000\000\003\000"

let yytablesize = 1162
let yytable = "\001\000\
\006\000\077\000\003\000\004\000\005\000\006\000\007\000\078\000\
\008\000\043\000\017\000\018\000\019\000\020\000\044\000\046\000\
\021\000\026\000\009\000\022\000\047\000\010\000\011\000\049\000\
\051\000\023\000\012\000\004\000\005\000\007\000\013\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\010\000\069\000\073\000\
\070\000\071\000\072\000\051\000\075\000\076\000\013\000\079\000\
\084\000\086\000\037\000\087\000\024\000\088\000\041\000\096\000\
\042\000\041\000\041\000\041\000\041\000\035\000\033\000\000\000\
\052\000\080\000\041\000\083\000\000\000\000\000\000\000\085\000\
\000\000\000\000\000\000\089\000\000\000\091\000\092\000\031\000\
\093\000\000\000\068\000\000\000\094\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\098\000\099\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\036\000\000\000\041\000\041\000\
\041\000\000\000\000\000\000\000\000\000\000\000\004\000\005\000\
\041\000\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\000\000\041\000\000\000\041\000\041\000\041\000\041\000\000\000\
\010\000\027\000\041\000\041\000\003\000\004\000\005\000\006\000\
\007\000\013\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\010\000\
\011\000\000\000\000\000\008\000\012\000\000\000\000\000\000\000\
\013\000\025\000\004\000\005\000\000\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\000\000\000\000\000\000\010\000\009\000\000\000\000\000\
\039\000\000\000\000\000\000\000\040\000\013\000\053\000\004\000\
\005\000\000\000\027\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\000\000\019\000\
\000\000\010\000\000\000\000\000\000\000\039\000\000\000\000\000\
\000\000\040\000\013\000\090\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\006\000\000\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\000\000\006\000\006\000\006\000\022\000\006\000\000\000\006\000\
\000\000\006\000\000\000\006\000\006\000\006\000\007\000\007\000\
\000\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\000\000\007\000\007\000\
\007\000\023\000\007\000\000\000\007\000\000\000\000\000\000\000\
\007\000\007\000\007\000\037\000\037\000\000\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\000\000\037\000\037\000\037\000\011\000\037\000\
\000\000\037\000\000\000\000\000\000\000\037\000\037\000\037\000\
\031\000\031\000\000\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\000\000\
\031\000\031\000\031\000\010\000\031\000\000\000\031\000\000\000\
\000\000\000\000\031\000\031\000\031\000\036\000\036\000\000\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\000\000\036\000\036\000\036\000\
\021\000\036\000\000\000\036\000\000\000\000\000\000\000\036\000\
\036\000\036\000\027\000\027\000\000\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\000\000\027\000\027\000\027\000\020\000\027\000\000\000\
\000\000\000\000\000\000\000\000\027\000\027\000\027\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\012\000\008\000\008\000\000\000\000\000\
\008\000\000\000\008\000\000\000\000\000\000\000\008\000\000\000\
\008\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\013\000\009\000\009\000\
\000\000\000\000\009\000\000\000\009\000\000\000\000\000\000\000\
\009\000\000\000\009\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\016\000\
\019\000\019\000\000\000\000\000\019\000\000\000\019\000\000\000\
\000\000\000\000\019\000\000\000\019\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\017\000\026\000\026\000\000\000\000\000\026\000\000\000\
\026\000\000\000\000\000\000\000\026\000\000\000\026\000\030\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\014\000\022\000\022\000\000\000\
\000\000\022\000\000\000\022\000\000\000\000\000\000\000\022\000\
\000\000\022\000\000\000\000\000\025\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\015\000\023\000\023\000\000\000\000\000\023\000\000\000\
\023\000\000\000\000\000\000\000\023\000\000\000\023\000\039\000\
\000\000\000\000\011\000\011\000\011\000\011\000\038\000\000\000\
\011\000\011\000\011\000\011\000\011\000\011\000\000\000\011\000\
\011\000\000\000\000\000\011\000\018\000\011\000\024\000\000\000\
\000\000\011\000\000\000\011\000\000\000\000\000\000\000\010\000\
\010\000\010\000\010\000\029\000\000\000\010\000\010\000\010\000\
\010\000\010\000\010\000\000\000\010\000\010\000\000\000\000\000\
\010\000\028\000\010\000\000\000\000\000\000\000\010\000\000\000\
\010\000\000\000\000\000\000\000\021\000\021\000\021\000\021\000\
\000\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
\000\000\021\000\021\000\000\000\000\000\021\000\000\000\021\000\
\000\000\000\000\000\000\021\000\000\000\021\000\000\000\000\000\
\000\000\020\000\020\000\020\000\020\000\000\000\000\000\020\000\
\020\000\020\000\020\000\020\000\020\000\000\000\020\000\020\000\
\000\000\000\000\020\000\000\000\020\000\000\000\000\000\000\000\
\020\000\000\000\020\000\000\000\000\000\012\000\012\000\012\000\
\012\000\012\000\012\000\000\000\012\000\012\000\000\000\000\000\
\012\000\000\000\012\000\004\000\005\000\000\000\012\000\000\000\
\012\000\000\000\031\000\032\000\000\000\000\000\000\000\013\000\
\013\000\013\000\013\000\013\000\013\000\010\000\013\000\013\000\
\000\000\000\000\013\000\000\000\013\000\000\000\013\000\000\000\
\013\000\000\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\000\016\000\016\000\016\000\016\000\016\000\000\000\
\016\000\016\000\000\000\000\000\016\000\000\000\016\000\000\000\
\000\000\000\000\016\000\000\000\016\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\017\000\017\000\017\000\017\000\
\017\000\000\000\017\000\017\000\000\000\000\000\017\000\000\000\
\017\000\000\000\000\000\000\000\017\000\000\000\017\000\000\000\
\030\000\030\000\000\000\000\000\030\000\000\000\014\000\014\000\
\014\000\014\000\014\000\014\000\030\000\014\000\014\000\000\000\
\000\000\014\000\000\000\014\000\000\000\000\000\000\000\014\000\
\000\000\014\000\000\000\000\000\000\000\025\000\025\000\000\000\
\000\000\025\000\000\000\015\000\015\000\015\000\015\000\015\000\
\015\000\025\000\015\000\015\000\000\000\000\000\015\000\000\000\
\015\000\000\000\000\000\000\000\015\000\000\000\015\000\000\000\
\039\000\039\000\000\000\000\000\039\000\000\000\039\000\038\000\
\038\000\000\000\039\000\038\000\039\000\038\000\000\000\000\000\
\000\000\038\000\000\000\038\000\000\000\018\000\018\000\024\000\
\024\000\018\000\000\000\024\000\000\000\000\000\000\000\018\000\
\000\000\018\000\000\000\024\000\029\000\029\000\000\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\029\000\000\000\028\000\028\000\000\000\000\000\028\000\000\000\
\000\000\000\000\000\000\000\000\004\000\005\000\028\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\000\000\000\000\000\000\010\000\000\000\
\000\000\000\000\039\000\000\000\000\000\000\000\040\000\013\000\
\095\000\004\000\005\000\000\000\027\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\000\000\045\000\000\000\010\000\000\000\000\000\000\000\039\000\
\000\000\000\000\000\000\040\000\013\000\004\000\005\000\000\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\000\000\000\000\081\000\010\000\
\000\000\000\000\000\000\039\000\000\000\000\000\000\000\040\000\
\013\000\004\000\005\000\000\000\027\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\000\000\000\000\000\000\010\000\000\000\082\000\000\000\039\000\
\000\000\000\000\000\000\040\000\013\000\004\000\005\000\000\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\000\000\000\000\000\000\010\000\
\000\000\097\000\000\000\039\000\000\000\000\000\000\000\040\000\
\013\000\004\000\005\000\000\000\027\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\000\000\000\000\000\000\010\000\000\000\000\000\000\000\039\000\
\000\000\000\000\000\000\040\000\013\000\004\000\005\000\000\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\000\000\000\000\000\000\010\000\
\000\000\000\000\000\000\039\000\000\000\000\000\004\000\005\000\
\013\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\000\000\004\000\005\000\
\010\000\027\000\028\000\029\000\030\000\031\000\032\000\000\000\
\000\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000"

let yycheck = "\001\000\
\000\000\023\001\000\001\001\001\002\001\003\001\004\001\029\001\
\006\001\025\001\006\000\007\000\008\000\009\000\023\001\010\001\
\019\001\013\000\016\001\022\001\019\001\019\001\020\001\019\001\
\025\001\028\001\024\001\001\001\002\001\000\000\028\001\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\019\001\028\001\019\001\
\044\000\045\000\046\000\025\001\021\001\023\001\028\001\028\001\
\010\001\019\001\000\000\019\001\012\000\010\001\014\000\026\001\
\000\000\017\000\018\000\019\000\020\000\010\001\021\001\255\255\
\024\000\069\000\026\000\073\000\255\255\255\255\255\255\075\000\
\255\255\255\255\255\255\079\000\255\255\081\000\082\000\000\000\
\084\000\255\255\042\000\255\255\088\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\096\000\097\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\000\000\255\255\070\000\071\000\
\072\000\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\080\000\255\255\255\255\255\255\255\255\085\000\255\255\255\255\
\255\255\089\000\255\255\091\000\092\000\093\000\094\000\255\255\
\019\001\000\000\098\000\099\000\000\001\001\001\002\001\003\001\
\004\001\028\001\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\016\001\255\255\255\255\019\001\
\020\001\255\255\255\255\000\000\024\001\255\255\255\255\255\255\
\028\001\029\001\001\001\002\001\255\255\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\255\255\019\001\000\000\255\255\255\255\
\023\001\255\255\255\255\255\255\027\001\028\001\029\001\001\001\
\002\001\255\255\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\000\000\
\255\255\019\001\255\255\255\255\255\255\023\001\255\255\255\255\
\255\255\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\019\001\000\000\021\001\255\255\023\001\
\255\255\025\001\255\255\027\001\028\001\029\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\017\001\018\001\
\019\001\000\000\021\001\255\255\023\001\255\255\255\255\255\255\
\027\001\028\001\029\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\017\001\018\001\019\001\000\000\021\001\
\255\255\023\001\255\255\255\255\255\255\027\001\028\001\029\001\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\019\001\000\000\021\001\255\255\023\001\255\255\
\255\255\255\255\027\001\028\001\029\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\018\001\019\001\
\000\000\021\001\255\255\023\001\255\255\255\255\255\255\027\001\
\028\001\029\001\001\001\002\001\255\255\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\018\001\019\001\000\000\021\001\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\029\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\000\000\017\001\018\001\255\255\255\255\
\021\001\255\255\023\001\255\255\255\255\255\255\027\001\255\255\
\029\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\000\000\017\001\018\001\
\255\255\255\255\021\001\255\255\023\001\255\255\255\255\255\255\
\027\001\255\255\029\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\000\000\
\017\001\018\001\255\255\255\255\021\001\255\255\023\001\255\255\
\255\255\255\255\027\001\255\255\029\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\000\000\017\001\018\001\255\255\255\255\021\001\255\255\
\023\001\255\255\255\255\255\255\027\001\255\255\029\001\000\000\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\000\000\017\001\018\001\255\255\
\255\255\021\001\255\255\023\001\255\255\255\255\255\255\027\001\
\255\255\029\001\255\255\255\255\000\000\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\000\000\017\001\018\001\255\255\255\255\021\001\255\255\
\023\001\255\255\255\255\255\255\027\001\255\255\029\001\000\000\
\255\255\255\255\004\001\005\001\006\001\007\001\000\000\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\255\255\255\255\021\001\000\000\023\001\000\000\255\255\
\255\255\027\001\255\255\029\001\255\255\255\255\255\255\004\001\
\005\001\006\001\007\001\000\000\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\255\255\255\255\
\021\001\000\000\023\001\255\255\255\255\255\255\027\001\255\255\
\029\001\255\255\255\255\255\255\004\001\005\001\006\001\007\001\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\255\255\255\255\021\001\255\255\023\001\
\255\255\255\255\255\255\027\001\255\255\029\001\255\255\255\255\
\255\255\004\001\005\001\006\001\007\001\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\017\001\018\001\
\255\255\255\255\021\001\255\255\023\001\255\255\255\255\255\255\
\027\001\255\255\029\001\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\255\255\255\255\
\021\001\255\255\023\001\001\001\002\001\255\255\027\001\255\255\
\029\001\255\255\008\001\009\001\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\019\001\017\001\018\001\
\255\255\255\255\021\001\255\255\023\001\255\255\028\001\255\255\
\027\001\255\255\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\255\255\255\255\021\001\255\255\023\001\255\255\
\255\255\255\255\027\001\255\255\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\018\001\255\255\255\255\021\001\255\255\
\023\001\255\255\255\255\255\255\027\001\255\255\029\001\255\255\
\017\001\018\001\255\255\255\255\021\001\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\029\001\017\001\018\001\255\255\
\255\255\021\001\255\255\023\001\255\255\255\255\255\255\027\001\
\255\255\029\001\255\255\255\255\255\255\017\001\018\001\255\255\
\255\255\021\001\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\029\001\017\001\018\001\255\255\255\255\021\001\255\255\
\023\001\255\255\255\255\255\255\027\001\255\255\029\001\255\255\
\017\001\018\001\255\255\255\255\021\001\255\255\023\001\017\001\
\018\001\255\255\027\001\021\001\029\001\023\001\255\255\255\255\
\255\255\027\001\255\255\029\001\255\255\017\001\018\001\017\001\
\018\001\021\001\255\255\021\001\255\255\255\255\255\255\027\001\
\255\255\029\001\255\255\029\001\017\001\018\001\255\255\255\255\
\021\001\255\255\255\255\255\255\255\255\255\255\027\001\255\255\
\029\001\255\255\017\001\018\001\255\255\255\255\021\001\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\029\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\255\255\255\255\255\255\019\001\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\027\001\028\001\
\029\001\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\255\255\019\001\255\255\255\255\255\255\023\001\
\255\255\255\255\255\255\027\001\028\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\018\001\019\001\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\027\001\
\028\001\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\255\255\021\001\255\255\023\001\
\255\255\255\255\255\255\027\001\028\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\019\001\
\255\255\021\001\255\255\023\001\255\255\255\255\255\255\027\001\
\028\001\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\019\001\255\255\255\255\255\255\023\001\
\255\255\255\255\255\255\027\001\028\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\019\001\
\255\255\255\255\255\255\023\001\255\255\255\255\001\001\002\001\
\028\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\001\001\002\001\
\019\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\028\001\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 61 "parser.mly"
    ( _2 )
# 483 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
    ( Unit )
# 489 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 65 "parser.mly"
    ( Int(_1) )
# 496 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 67 "parser.mly"
    ( Float(_1) )
# 503 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 69 "parser.mly"
    ( Var(_1) )
# 510 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 71 "parser.mly"
    ( Get(_1, _4) )
# 518 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 75 "parser.mly"
    ( _1 )
# 525 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 78 "parser.mly"
    ( Not(_2) )
# 532 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 81 "parser.mly"
    ( match _2 with
    | Float(f) -> Float(-.f) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 541 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 85 "parser.mly"
    ( Add(_1, _3) )
# 549 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 87 "parser.mly"
    ( Sub(_1, _3) )
# 557 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 89 "parser.mly"
    ( Eq(_1, _3) )
# 565 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 91 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 573 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 93 "parser.mly"
    ( Not(LE(_3, _1)) )
# 581 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 95 "parser.mly"
    ( Not(LE(_1, _3)) )
# 589 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 97 "parser.mly"
    ( LE(_1, _3) )
# 597 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 99 "parser.mly"
    ( LE(_3, _1) )
# 605 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
    ( If(_2, _4, _6) )
# 614 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 105 "parser.mly"
    ( FNeg(_2) )
# 621 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 107 "parser.mly"
    ( FAdd(_1, _3) )
# 629 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 109 "parser.mly"
    ( FSub(_1, _3) )
# 637 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 111 "parser.mly"
    ( FMul(_1, _3) )
# 645 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 113 "parser.mly"
    ( FDiv(_1, _3) )
# 653 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 116 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 662 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 119 "parser.mly"
    ( LetRec(_3, _5) )
# 670 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 122 "parser.mly"
    ( App(_1, _2) )
# 678 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 124 "parser.mly"
    ( Tuple(_1) )
# 685 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 694 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 128 "parser.mly"
    ( Put(_1, _4, _7) )
# 703 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 711 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 133 "parser.mly"
    ( Array(_2, _3) )
# 719 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
 ( failwith
	(Printf.sprintf "parse error near characters %d-%d, L: %d"
	   (Parsing.symbol_start ())
	   (Parsing.symbol_end ())
	(!Syntax.count_line)) )
# 729 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 143 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 738 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 147 "parser.mly"
    ( addtyp _1 :: _2 )
# 746 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 149 "parser.mly"
    ( [addtyp _1] )
# 753 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 154 "parser.mly"
    ( _1 @ [_2] )
# 761 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 157 "parser.mly"
    ( [_1] )
# 768 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 161 "parser.mly"
    ( _1 @ [_3] )
# 776 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 163 "parser.mly"
    ( [_1; _3] )
# 784 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 167 "parser.mly"
    ( _1 @ [addtyp _3] )
# 792 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 169 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 800 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
