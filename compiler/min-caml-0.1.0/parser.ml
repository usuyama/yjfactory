type token =
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | MUL
  | DIV
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
# 3 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
# 41 "parser.ml"
let yytransl_const = [|
  259 (* NOT *);
  260 (* MINUS *);
  261 (* PLUS *);
  262 (* MUL *);
  263 (* DIV *);
  264 (* MINUS_DOT *);
  265 (* PLUS_DOT *);
  266 (* AST_DOT *);
  267 (* SLASH_DOT *);
  268 (* EQUAL *);
  269 (* LESS_GREATER *);
  270 (* LESS_EQUAL *);
  271 (* GREATER_EQUAL *);
  272 (* LESS *);
  273 (* GREATER *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  278 (* LET *);
  279 (* IN *);
  280 (* REC *);
  281 (* COMMA *);
  282 (* ARRAY_CREATE *);
  283 (* DOT *);
  284 (* LESS_MINUS *);
  285 (* SEMICOLON *);
  286 (* LPAREN *);
  287 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  277 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\007\000\007\000\004\000\004\000\005\000\
\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\005\000\001\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\006\000\002\000\003\000\003\000\003\000\
\003\000\006\000\005\000\002\000\001\000\008\000\007\000\003\000\
\003\000\001\000\004\000\002\000\001\000\002\000\001\000\003\000\
\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\034\000\003\000\004\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000\000\
\000\000\043\000\042\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\014\000\015\000\050\000\044\000\016\000\052\000\078\000"

let yysindex = "\255\255\
\003\255\000\000\000\000\000\000\000\000\003\255\003\255\003\255\
\003\255\000\000\244\254\068\255\057\255\130\003\239\254\248\254\
\070\255\070\255\070\255\010\003\007\255\001\255\002\255\083\255\
\000\000\212\255\003\255\003\255\003\255\003\255\003\255\003\255\
\003\255\003\255\003\255\003\255\003\255\003\255\003\255\003\255\
\003\255\003\255\255\254\068\255\253\254\003\255\003\255\003\255\
\009\255\005\255\006\255\233\254\020\255\255\254\000\000\217\003\
\217\003\130\003\130\003\217\003\217\003\070\255\070\255\205\003\
\205\003\205\003\205\003\205\003\205\003\187\003\130\003\255\254\
\003\255\187\003\040\003\070\003\009\255\039\255\003\255\031\255\
\035\255\050\255\003\255\204\002\003\255\003\255\000\000\003\255\
\130\003\000\000\000\000\003\255\235\002\036\255\160\003\130\003\
\130\003\100\003\000\000\003\255\003\255\160\003\130\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\032\000\156\000\
\212\000\240\000\019\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\063\000\184\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\094\000\000\000\112\001\
\143\001\181\001\138\002\174\001\202\001\050\001\081\001\230\001\
\002\002\022\002\043\002\068\002\088\002\102\002\153\002\125\000\
\000\000\109\002\000\000\000\000\055\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\167\002\000\000\000\000\000\000\000\000\001\000\122\002\169\002\
\045\255\000\000\000\000\000\000\000\000\136\002\176\002"

let yygindex = "\000\000\
\007\000\102\000\000\000\000\000\000\000\000\000\252\255"

let yytablesize = 1271
let yytable = "\001\000\
\006\000\081\000\003\000\004\000\005\000\006\000\007\000\082\000\
\021\000\045\000\008\000\022\000\017\000\018\000\019\000\020\000\
\046\000\023\000\048\000\026\000\009\000\049\000\051\000\010\000\
\011\000\053\000\073\000\079\000\012\000\077\000\080\000\007\000\
\013\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\083\000\088\000\090\000\074\000\075\000\076\000\091\000\
\003\000\004\000\005\000\006\000\007\000\092\000\039\000\100\000\
\008\000\044\000\037\000\035\000\004\000\005\000\004\000\005\000\
\087\000\000\000\009\000\029\000\030\000\010\000\011\000\084\000\
\000\000\000\000\012\000\004\000\005\000\089\000\013\000\025\000\
\010\000\093\000\010\000\095\000\096\000\033\000\097\000\000\000\
\000\000\013\000\098\000\013\000\000\000\000\000\000\000\010\000\
\000\000\000\000\102\000\103\000\000\000\053\000\000\000\000\000\
\013\000\024\000\000\000\043\000\000\000\000\000\043\000\043\000\
\043\000\043\000\000\000\000\000\038\000\054\000\000\000\043\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\072\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\000\000\000\000\043\000\
\043\000\043\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\043\000\000\000\000\000\000\000\000\000\043\000\000\000\
\000\000\000\000\043\000\000\000\043\000\043\000\043\000\043\000\
\000\000\000\000\000\000\043\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\004\000\005\000\000\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\041\000\000\000\000\000\009\000\
\042\000\013\000\055\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\006\000\000\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\021\000\006\000\006\000\006\000\000\000\006\000\
\000\000\006\000\000\000\006\000\000\000\006\000\006\000\006\000\
\007\000\007\000\000\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\024\000\007\000\007\000\007\000\000\000\007\000\000\000\
\007\000\000\000\000\000\000\000\007\000\007\000\007\000\039\000\
\039\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\025\000\039\000\039\000\039\000\000\000\039\000\000\000\039\000\
\000\000\000\000\000\000\039\000\039\000\039\000\033\000\033\000\
\000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\011\000\
\033\000\033\000\033\000\000\000\033\000\000\000\033\000\000\000\
\000\000\000\000\033\000\033\000\033\000\038\000\038\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\010\000\038\000\
\038\000\038\000\000\000\038\000\000\000\038\000\000\000\000\000\
\000\000\038\000\038\000\038\000\029\000\029\000\000\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\023\000\029\000\029\000\
\029\000\000\000\029\000\000\000\012\000\000\000\000\000\000\000\
\029\000\029\000\029\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\022\000\028\000\028\000\000\000\000\000\028\000\000\000\
\028\000\000\000\000\000\000\000\028\000\000\000\028\000\008\000\
\008\000\000\000\000\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\014\000\008\000\008\000\
\000\000\000\000\008\000\000\000\008\000\000\000\000\000\000\000\
\008\000\000\000\008\000\009\000\009\000\000\000\000\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\015\000\009\000\009\000\000\000\000\000\009\000\000\000\
\009\000\000\000\000\000\000\000\009\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\018\000\021\000\021\000\
\000\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\000\000\021\000\021\000\000\000\
\000\000\021\000\019\000\021\000\000\000\000\000\000\000\021\000\
\000\000\021\000\000\000\000\000\000\000\024\000\024\000\000\000\
\000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\016\000\024\000\024\000\000\000\000\000\
\024\000\000\000\024\000\000\000\000\000\000\000\024\000\000\000\
\024\000\000\000\000\000\000\000\025\000\025\000\000\000\017\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\000\000\025\000\025\000\041\000\000\000\025\000\
\000\000\025\000\000\000\000\000\040\000\025\000\000\000\025\000\
\000\000\000\000\000\000\011\000\011\000\000\000\000\000\011\000\
\011\000\020\000\000\000\011\000\011\000\011\000\011\000\011\000\
\011\000\000\000\011\000\011\000\000\000\000\000\011\000\031\000\
\011\000\013\000\000\000\000\000\011\000\000\000\011\000\000\000\
\000\000\000\000\010\000\010\000\000\000\000\000\010\000\010\000\
\032\000\000\000\010\000\010\000\010\000\010\000\010\000\010\000\
\000\000\010\000\010\000\000\000\000\000\010\000\027\000\010\000\
\026\000\000\000\000\000\010\000\000\000\010\000\000\000\030\000\
\000\000\023\000\023\000\000\000\000\000\023\000\023\000\000\000\
\000\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\023\000\023\000\000\000\000\000\023\000\000\000\023\000\012\000\
\012\000\000\000\023\000\012\000\023\000\022\000\022\000\000\000\
\000\000\022\000\022\000\012\000\000\000\022\000\022\000\022\000\
\022\000\022\000\022\000\000\000\022\000\022\000\000\000\000\000\
\022\000\000\000\022\000\000\000\000\000\000\000\022\000\000\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\014\000\014\000\014\000\014\000\014\000\000\000\
\014\000\014\000\000\000\000\000\014\000\000\000\014\000\000\000\
\000\000\000\000\014\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\015\000\015\000\015\000\
\015\000\015\000\015\000\000\000\015\000\015\000\000\000\000\000\
\015\000\000\000\015\000\000\000\000\000\000\000\015\000\000\000\
\015\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
\018\000\018\000\000\000\000\000\018\000\000\000\018\000\000\000\
\000\000\000\000\018\000\000\000\018\000\000\000\019\000\019\000\
\019\000\019\000\019\000\019\000\000\000\019\000\019\000\000\000\
\000\000\019\000\000\000\019\000\000\000\000\000\000\000\019\000\
\000\000\019\000\000\000\000\000\000\000\000\000\000\000\016\000\
\016\000\016\000\016\000\016\000\016\000\000\000\016\000\016\000\
\000\000\000\000\016\000\000\000\016\000\000\000\000\000\000\000\
\016\000\000\000\016\000\017\000\017\000\017\000\017\000\017\000\
\017\000\000\000\017\000\017\000\000\000\000\000\017\000\000\000\
\017\000\000\000\000\000\000\000\017\000\000\000\017\000\000\000\
\041\000\041\000\000\000\000\000\041\000\000\000\041\000\040\000\
\040\000\000\000\041\000\040\000\041\000\040\000\000\000\000\000\
\000\000\040\000\000\000\040\000\020\000\020\000\000\000\000\000\
\020\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\
\020\000\000\000\031\000\031\000\013\000\013\000\031\000\000\000\
\013\000\000\000\000\000\000\000\031\000\000\000\031\000\000\000\
\013\000\000\000\000\000\032\000\032\000\000\000\000\000\032\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\027\000\027\000\026\000\026\000\027\000\000\000\026\000\
\000\000\000\000\030\000\030\000\000\000\027\000\030\000\026\000\
\000\000\000\000\000\000\000\000\004\000\005\000\030\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\000\000\
\010\000\000\000\000\000\000\000\041\000\000\000\000\000\000\000\
\042\000\013\000\094\000\004\000\005\000\000\000\027\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\000\000\000\000\000\000\010\000\
\000\000\000\000\000\000\041\000\000\000\000\000\000\000\042\000\
\013\000\099\000\004\000\005\000\000\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\000\000\047\000\000\000\010\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\042\000\013\000\
\004\000\005\000\000\000\027\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\000\000\000\000\085\000\010\000\000\000\000\000\000\000\
\041\000\000\000\000\000\000\000\042\000\013\000\004\000\005\000\
\000\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\000\000\
\000\000\000\000\010\000\000\000\086\000\000\000\041\000\000\000\
\000\000\000\000\042\000\013\000\004\000\005\000\000\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\000\000\
\010\000\000\000\101\000\000\000\041\000\000\000\000\000\000\000\
\042\000\013\000\004\000\005\000\000\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\000\000\000\000\000\000\010\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\042\000\013\000\
\004\000\005\000\000\000\027\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\041\000\000\000\000\000\004\000\005\000\013\000\027\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\000\000\004\000\005\000\010\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\013\000\004\000\005\000\000\000\000\000\000\000\029\000\030\000\
\000\000\010\000\033\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000"

let yycheck = "\001\000\
\000\000\025\001\000\001\001\001\002\001\003\001\004\001\031\001\
\021\001\027\001\008\001\024\001\006\000\007\000\008\000\009\000\
\025\001\030\001\012\001\013\000\018\001\021\001\021\001\021\001\
\022\001\027\001\030\001\023\001\026\001\021\001\025\001\000\000\
\030\001\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\030\001\012\001\021\001\046\000\047\000\048\000\021\001\
\000\001\001\001\002\001\003\001\004\001\012\001\000\000\028\001\
\008\001\000\000\012\001\023\001\001\001\002\001\001\001\002\001\
\077\000\255\255\018\001\006\001\007\001\021\001\022\001\073\000\
\255\255\255\255\026\001\001\001\002\001\079\000\030\001\031\001\
\021\001\083\000\021\001\085\000\086\000\000\000\088\000\255\255\
\255\255\030\001\092\000\030\001\255\255\255\255\255\255\021\001\
\255\255\255\255\100\000\101\000\255\255\027\001\255\255\255\255\
\030\001\012\000\255\255\014\000\255\255\255\255\017\000\018\000\
\019\000\020\000\255\255\255\255\000\000\024\000\255\255\026\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\044\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\255\255\255\255\074\000\
\075\000\076\000\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\084\000\255\255\255\255\255\255\255\255\089\000\255\255\
\255\255\255\255\093\000\255\255\095\000\096\000\097\000\098\000\
\255\255\255\255\255\255\102\000\103\000\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\025\001\255\255\255\255\000\000\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\021\001\255\255\023\001\
\255\255\025\001\255\255\027\001\255\255\029\001\030\001\031\001\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\000\000\019\001\020\001\021\001\255\255\023\001\255\255\
\025\001\255\255\255\255\255\255\029\001\030\001\031\001\001\001\
\002\001\255\255\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\021\001\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\030\001\031\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\000\000\
\019\001\020\001\021\001\255\255\023\001\255\255\025\001\255\255\
\255\255\255\255\029\001\030\001\031\001\001\001\002\001\255\255\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\000\000\019\001\
\020\001\021\001\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\030\001\031\001\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\000\000\019\001\020\001\
\021\001\255\255\023\001\255\255\000\000\255\255\255\255\255\255\
\029\001\030\001\031\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\000\000\019\001\020\001\255\255\255\255\023\001\255\255\
\025\001\255\255\255\255\255\255\029\001\255\255\031\001\004\001\
\005\001\255\255\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\000\000\019\001\020\001\
\255\255\255\255\023\001\255\255\025\001\255\255\255\255\255\255\
\029\001\255\255\031\001\004\001\005\001\255\255\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\000\000\019\001\020\001\255\255\255\255\023\001\255\255\
\025\001\255\255\255\255\255\255\029\001\255\255\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\004\001\005\001\
\255\255\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\255\255\023\001\000\000\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\255\255\255\255\255\255\004\001\005\001\255\255\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\000\000\019\001\020\001\255\255\255\255\
\023\001\255\255\025\001\255\255\255\255\255\255\029\001\255\255\
\031\001\255\255\255\255\255\255\004\001\005\001\255\255\000\000\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\000\000\255\255\023\001\
\255\255\025\001\255\255\255\255\000\000\029\001\255\255\031\001\
\255\255\255\255\255\255\004\001\005\001\255\255\255\255\008\001\
\009\001\000\000\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\255\255\255\255\023\001\000\000\
\025\001\000\000\255\255\255\255\029\001\255\255\031\001\255\255\
\255\255\255\255\004\001\005\001\255\255\255\255\008\001\009\001\
\000\000\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\255\255\023\001\000\000\025\001\
\000\000\255\255\255\255\029\001\255\255\031\001\255\255\000\000\
\255\255\004\001\005\001\255\255\255\255\008\001\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\020\001\255\255\255\255\023\001\255\255\025\001\019\001\
\020\001\255\255\029\001\023\001\031\001\004\001\005\001\255\255\
\255\255\008\001\009\001\031\001\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\255\255\255\255\
\023\001\255\255\025\001\255\255\255\255\255\255\029\001\255\255\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\020\001\255\255\255\255\023\001\255\255\025\001\255\255\
\255\255\255\255\029\001\255\255\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\255\255\255\255\
\023\001\255\255\025\001\255\255\255\255\255\255\029\001\255\255\
\031\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\020\001\255\255\255\255\023\001\255\255\025\001\255\255\
\255\255\255\255\029\001\255\255\031\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\255\255\255\255\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\255\255\255\255\023\001\255\255\025\001\255\255\255\255\255\255\
\029\001\255\255\031\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\255\255\255\255\023\001\255\255\
\025\001\255\255\255\255\255\255\029\001\255\255\031\001\255\255\
\019\001\020\001\255\255\255\255\023\001\255\255\025\001\019\001\
\020\001\255\255\029\001\023\001\031\001\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\019\001\020\001\255\255\255\255\
\023\001\255\255\255\255\255\255\255\255\255\255\029\001\255\255\
\031\001\255\255\019\001\020\001\019\001\020\001\023\001\255\255\
\023\001\255\255\255\255\255\255\029\001\255\255\031\001\255\255\
\031\001\255\255\255\255\019\001\020\001\255\255\255\255\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\255\255\019\001\020\001\019\001\020\001\023\001\255\255\023\001\
\255\255\255\255\019\001\020\001\255\255\031\001\023\001\031\001\
\255\255\255\255\255\255\255\255\001\001\002\001\031\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\031\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\255\255\255\255\021\001\
\255\255\255\255\255\255\025\001\255\255\255\255\255\255\029\001\
\030\001\031\001\001\001\002\001\255\255\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\255\255\021\001\255\255\
\255\255\255\255\025\001\255\255\255\255\255\255\029\001\030\001\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\021\001\255\255\255\255\255\255\
\025\001\255\255\255\255\255\255\029\001\030\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\255\255\023\001\255\255\025\001\255\255\
\255\255\255\255\029\001\030\001\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\023\001\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\001\001\002\001\255\255\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\255\255\025\001\255\255\255\255\255\255\029\001\030\001\
\001\001\002\001\255\255\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\021\001\255\255\255\255\255\255\
\025\001\255\255\255\255\001\001\002\001\030\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\001\001\002\001\021\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\030\001\001\001\002\001\255\255\255\255\255\255\006\001\007\001\
\255\255\021\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MUL\000\
  DIV\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 64 "parser.mly"
    ( _2 )
# 515 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
    ( Unit )
# 521 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 68 "parser.mly"
    ( Int(_1) )
# 528 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 70 "parser.mly"
    ( Float(_1) )
# 535 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 72 "parser.mly"
    ( Var(_1) )
# 542 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 74 "parser.mly"
    ( Get(_1, _4) )
# 550 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 78 "parser.mly"
    ( _1 )
# 557 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 81 "parser.mly"
    ( Not(_2) )
# 564 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 84 "parser.mly"
    ( match _2 with
    | Float(f) -> Float(-.f) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 573 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 88 "parser.mly"
    ( Add(_1, _3) )
# 581 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 90 "parser.mly"
    ( Sub(_1, _3) )
# 589 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 92 "parser.mly"
    ( Mul(_1, _3) )
# 597 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 94 "parser.mly"
    ( Div(_1, _3) )
# 605 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 96 "parser.mly"
    ( Eq(_1, _3) )
# 613 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 98 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 621 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 100 "parser.mly"
    ( Not(LE(_3, _1)) )
# 629 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
    ( Not(LE(_1, _3)) )
# 637 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 104 "parser.mly"
    ( LE(_1, _3) )
# 645 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 106 "parser.mly"
    ( LE(_3, _1) )
# 653 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 109 "parser.mly"
    ( If(_2, _4, _6) )
# 662 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
    ( FNeg(_2) )
# 669 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
    ( FAdd(_1, _3) )
# 677 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 116 "parser.mly"
    ( FSub(_1, _3) )
# 685 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
    ( FMul(_1, _3) )
# 693 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 120 "parser.mly"
    ( FDiv(_1, _3) )
# 701 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 123 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 710 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
    ( LetRec(_3, _5) )
# 718 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 129 "parser.mly"
    ( App(_1, _2) )
# 726 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 131 "parser.mly"
    ( Tuple(_1) )
# 733 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 133 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 742 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 135 "parser.mly"
    ( Put(_1, _4, _7) )
# 751 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 137 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 759 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 140 "parser.mly"
    ( Array(_2, _3) )
# 767 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
 ( failwith
	(Printf.sprintf "parse error near characters %d-%d, L: %d, R: %d"
	   (Parsing.symbol_start ())
	   (Parsing.symbol_end ())
	(!Syntax.count_line)
	((Parsing.symbol_start ()) - !Syntax.symbol_start)) )
# 778 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 151 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 787 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 155 "parser.mly"
    ( addtyp _1 :: _2 )
# 795 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 157 "parser.mly"
    ( [addtyp _1] )
# 802 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 162 "parser.mly"
    ( _1 @ [_2] )
# 810 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 165 "parser.mly"
    ( [_1] )
# 817 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 169 "parser.mly"
    ( _1 @ [_3] )
# 825 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 171 "parser.mly"
    ( [_1; _3] )
# 833 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 175 "parser.mly"
    ( _1 @ [addtyp _3] )
# 841 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 177 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 849 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
