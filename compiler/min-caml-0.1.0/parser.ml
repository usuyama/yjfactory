type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | MUL
  | DIV
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
# 3 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
# 42 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* MUL *);
  264 (* DIV *);
  265 (* MINUS_DOT *);
  266 (* PLUS_DOT *);
  267 (* AST_DOT *);
  268 (* SLASH_DOT *);
  269 (* EQUAL *);
  270 (* LESS_GREATER *);
  271 (* LESS_EQUAL *);
  272 (* GREATER_EQUAL *);
  273 (* LESS *);
  274 (* GREATER *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  279 (* LET *);
  280 (* IN *);
  281 (* REC *);
  282 (* COMMA *);
  283 (* ARRAY_CREATE *);
  284 (* DOT *);
  285 (* LESS_MINUS *);
  286 (* SEMICOLON *);
  287 (* LPAREN *);
  288 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  278 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\007\000\007\000\004\000\004\000\
\005\000\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\006\000\002\000\003\000\003\000\
\003\000\003\000\006\000\005\000\002\000\001\000\008\000\007\000\
\003\000\003\000\001\000\004\000\002\000\001\000\002\000\001\000\
\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\035\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\000\000\000\000\044\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\015\000\016\000\051\000\045\000\017\000\053\000\079\000"

let yysindex = "\004\000\
\230\255\000\000\000\000\000\000\000\000\000\000\230\255\230\255\
\230\255\230\255\000\000\242\254\108\255\163\255\204\003\235\254\
\239\254\108\255\108\255\108\255\080\003\253\254\246\254\252\254\
\001\255\000\000\196\255\230\255\230\255\230\255\230\255\230\255\
\230\255\230\255\230\255\230\255\230\255\230\255\230\255\230\255\
\230\255\230\255\230\255\247\254\108\255\249\254\230\255\230\255\
\230\255\255\254\254\254\000\255\230\254\250\254\247\254\000\000\
\056\255\056\255\108\255\108\255\056\255\056\255\108\255\108\255\
\024\004\024\004\024\004\024\004\024\004\024\004\006\004\204\003\
\247\254\230\255\006\004\111\003\142\003\255\254\014\255\230\255\
\006\255\008\255\018\255\230\255\016\003\230\255\230\255\000\000\
\230\255\204\003\000\000\000\000\230\255\048\003\021\255\235\003\
\204\003\204\003\173\003\000\000\230\255\230\255\235\003\204\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\000\033\000\
\161\000\189\000\217\000\245\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\020\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\097\000\000\000\
\180\001\208\001\052\001\084\001\236\001\008\002\116\001\148\001\
\039\002\071\002\103\002\135\002\167\002\187\002\202\002\187\001\
\129\000\000\000\209\002\000\000\000\000\039\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\235\002\000\000\000\000\000\000\000\000\001\000\216\002\
\237\002\032\255\000\000\000\000\000\000\000\000\230\002\244\002"

let yygindex = "\000\000\
\006\000\056\000\000\000\000\000\000\000\000\000\238\255"

let yytablesize = 1335
let yytable = "\082\000\
\007\000\004\000\005\000\006\000\001\000\083\000\046\000\022\000\
\047\000\049\000\023\000\050\000\018\000\019\000\020\000\021\000\
\024\000\052\000\054\000\027\000\078\000\080\000\011\000\074\000\
\084\000\081\000\089\000\091\000\054\000\092\000\093\000\014\000\
\008\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\101\000\045\000\038\000\075\000\076\000\077\000\036\000\
\004\000\005\000\006\000\088\000\000\000\000\000\030\000\031\000\
\040\000\000\000\034\000\035\000\025\000\000\000\044\000\000\000\
\000\000\044\000\044\000\044\000\044\000\011\000\000\000\085\000\
\055\000\000\000\044\000\000\000\000\000\090\000\014\000\000\000\
\000\000\094\000\000\000\096\000\097\000\000\000\098\000\000\000\
\034\000\000\000\099\000\000\000\073\000\000\000\000\000\000\000\
\000\000\000\000\103\000\104\000\004\000\005\000\006\000\000\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\039\000\011\000\044\000\044\000\044\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\044\000\000\000\000\000\000\000\
\000\000\044\000\000\000\000\000\000\000\044\000\000\000\044\000\
\044\000\044\000\044\000\000\000\000\000\000\000\044\000\044\000\
\030\000\000\000\003\000\004\000\005\000\006\000\007\000\008\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\011\000\012\000\000\000\000\000\009\000\013\000\000\000\000\000\
\000\000\014\000\026\000\000\000\004\000\005\000\006\000\000\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\000\000\000\000\
\010\000\011\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\043\000\014\000\056\000\000\000\003\000\004\000\005\000\
\006\000\007\000\008\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\010\000\000\000\000\000\011\000\012\000\000\000\000\000\000\000\
\013\000\007\000\007\000\007\000\014\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\029\000\007\000\007\000\007\000\000\000\
\007\000\000\000\007\000\000\000\007\000\000\000\007\000\007\000\
\007\000\008\000\008\000\008\000\000\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\013\000\008\000\008\000\008\000\000\000\
\008\000\000\000\008\000\000\000\000\000\000\000\008\000\008\000\
\008\000\040\000\040\000\040\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\014\000\040\000\040\000\040\000\000\000\
\040\000\000\000\040\000\000\000\000\000\000\000\040\000\040\000\
\040\000\034\000\034\000\034\000\000\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\025\000\034\000\034\000\034\000\000\000\
\034\000\000\000\034\000\000\000\000\000\000\000\034\000\034\000\
\034\000\039\000\039\000\039\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\026\000\039\000\039\000\039\000\000\000\
\039\000\000\000\039\000\000\000\000\000\000\000\039\000\039\000\
\039\000\030\000\030\000\030\000\000\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\012\000\030\000\030\000\030\000\000\000\
\030\000\000\000\033\000\000\000\000\000\000\000\030\000\030\000\
\030\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\011\000\
\009\000\009\000\000\000\000\000\009\000\000\000\009\000\000\000\
\000\000\000\000\009\000\000\000\009\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\024\000\010\000\010\000\000\000\000\000\
\010\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\
\010\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\023\000\
\022\000\022\000\000\000\000\000\022\000\000\000\022\000\000\000\
\000\000\000\000\022\000\000\000\022\000\000\000\000\000\000\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\015\000\029\000\
\029\000\000\000\000\000\029\000\000\000\029\000\000\000\000\000\
\000\000\029\000\000\000\029\000\000\000\000\000\000\000\000\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\016\000\013\000\
\013\000\000\000\000\000\013\000\000\000\013\000\000\000\000\000\
\000\000\013\000\000\000\013\000\000\000\000\000\000\000\000\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\019\000\014\000\
\014\000\000\000\000\000\014\000\000\000\014\000\000\000\000\000\
\000\000\014\000\000\000\014\000\000\000\000\000\000\000\000\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\020\000\025\000\
\025\000\000\000\000\000\025\000\000\000\025\000\000\000\000\000\
\000\000\025\000\000\000\025\000\000\000\000\000\000\000\000\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\017\000\026\000\
\026\000\000\000\000\000\026\000\000\000\026\000\000\000\000\000\
\000\000\026\000\000\000\026\000\000\000\000\000\000\000\000\000\
\012\000\012\000\018\000\000\000\012\000\012\000\000\000\000\000\
\012\000\012\000\012\000\012\000\012\000\012\000\000\000\012\000\
\012\000\042\000\000\000\012\000\000\000\012\000\033\000\033\000\
\041\000\012\000\033\000\012\000\011\000\011\000\000\000\021\000\
\011\000\011\000\033\000\000\000\011\000\011\000\011\000\011\000\
\011\000\011\000\000\000\011\000\011\000\032\000\000\000\011\000\
\000\000\011\000\028\000\000\000\027\000\011\000\000\000\011\000\
\024\000\024\000\000\000\031\000\024\000\024\000\000\000\000\000\
\024\000\024\000\024\000\024\000\024\000\024\000\000\000\024\000\
\024\000\000\000\000\000\024\000\000\000\024\000\000\000\000\000\
\000\000\024\000\000\000\024\000\023\000\023\000\000\000\000\000\
\023\000\023\000\000\000\000\000\023\000\023\000\023\000\023\000\
\023\000\023\000\000\000\023\000\023\000\000\000\000\000\023\000\
\000\000\023\000\000\000\000\000\000\000\023\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\000\015\000\015\000\015\000\015\000\
\015\000\000\000\015\000\015\000\000\000\000\000\015\000\000\000\
\015\000\000\000\000\000\000\000\015\000\000\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\016\000\016\000\016\000\016\000\
\016\000\000\000\016\000\016\000\000\000\000\000\016\000\000\000\
\016\000\000\000\000\000\000\000\016\000\000\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\019\000\019\000\019\000\019\000\019\000\
\019\000\000\000\019\000\019\000\000\000\000\000\019\000\000\000\
\019\000\000\000\000\000\000\000\019\000\000\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\020\000\020\000\020\000\020\000\
\020\000\000\000\020\000\020\000\000\000\000\000\020\000\000\000\
\020\000\000\000\000\000\000\000\020\000\000\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\017\000\017\000\017\000\017\000\
\017\000\000\000\017\000\017\000\000\000\000\000\017\000\000\000\
\017\000\000\000\000\000\000\000\017\000\000\000\017\000\018\000\
\018\000\018\000\018\000\018\000\018\000\000\000\018\000\018\000\
\000\000\000\000\018\000\000\000\018\000\000\000\000\000\000\000\
\018\000\000\000\018\000\000\000\000\000\042\000\042\000\000\000\
\000\000\042\000\000\000\042\000\041\000\041\000\000\000\042\000\
\041\000\042\000\041\000\021\000\021\000\000\000\041\000\021\000\
\041\000\000\000\000\000\000\000\000\000\021\000\000\000\021\000\
\000\000\032\000\032\000\000\000\000\000\032\000\028\000\028\000\
\027\000\027\000\028\000\032\000\027\000\032\000\000\000\031\000\
\031\000\000\000\028\000\031\000\027\000\000\000\000\000\000\000\
\004\000\005\000\006\000\031\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\042\000\000\000\000\000\000\000\043\000\014\000\095\000\
\004\000\005\000\006\000\000\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\042\000\000\000\000\000\000\000\043\000\014\000\100\000\
\004\000\005\000\006\000\000\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\000\000\048\000\000\000\011\000\000\000\000\000\
\000\000\042\000\000\000\000\000\000\000\043\000\014\000\004\000\
\005\000\006\000\000\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\000\000\000\000\086\000\011\000\000\000\000\000\000\000\
\042\000\000\000\000\000\000\000\043\000\014\000\004\000\005\000\
\006\000\000\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\000\000\000\000\000\000\011\000\000\000\087\000\000\000\042\000\
\000\000\000\000\000\000\043\000\014\000\004\000\005\000\006\000\
\000\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\000\000\
\000\000\000\000\011\000\000\000\102\000\000\000\042\000\000\000\
\000\000\000\000\043\000\014\000\004\000\005\000\006\000\000\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\043\000\014\000\004\000\005\000\006\000\000\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\042\000\000\000\004\000\005\000\
\006\000\014\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\004\000\005\000\006\000\011\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000"

let yycheck = "\026\001\
\000\000\001\001\002\001\003\001\001\000\032\001\028\001\022\001\
\026\001\013\001\025\001\022\001\007\000\008\000\009\000\010\000\
\031\001\022\001\028\001\014\000\022\001\024\001\022\001\031\001\
\031\001\026\001\013\001\022\001\028\001\022\001\013\001\031\001\
\000\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\029\001\000\000\013\001\047\000\048\000\049\000\024\001\
\001\001\002\001\003\001\078\000\255\255\255\255\007\001\008\001\
\000\000\255\255\011\001\012\001\013\000\255\255\015\000\255\255\
\255\255\018\000\019\000\020\000\021\000\022\001\255\255\074\000\
\025\000\255\255\027\000\255\255\255\255\080\000\031\001\255\255\
\255\255\084\000\255\255\086\000\087\000\255\255\089\000\255\255\
\000\000\255\255\093\000\255\255\045\000\255\255\255\255\255\255\
\255\255\255\255\101\000\102\000\001\001\002\001\003\001\255\255\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\000\000\022\001\075\000\076\000\077\000\255\255\255\255\255\255\
\255\255\255\255\031\001\255\255\085\000\255\255\255\255\255\255\
\255\255\090\000\255\255\255\255\255\255\094\000\255\255\096\000\
\097\000\098\000\099\000\255\255\255\255\255\255\103\000\104\000\
\000\000\255\255\000\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\255\255\255\255\
\022\001\023\001\255\255\255\255\000\000\027\001\255\255\255\255\
\255\255\031\001\032\001\255\255\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\000\000\022\001\255\255\255\255\255\255\026\001\255\255\255\255\
\255\255\030\001\031\001\032\001\255\255\000\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\019\001\255\255\255\255\022\001\023\001\255\255\255\255\255\255\
\027\001\001\001\002\001\003\001\031\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\255\255\028\001\255\255\030\001\031\001\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\031\001\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\031\001\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\031\001\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\031\001\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\022\001\255\255\
\024\001\255\255\000\000\255\255\255\255\255\255\030\001\031\001\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\255\255\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\255\255\032\001\255\255\255\255\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\000\000\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\000\000\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\000\000\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\000\000\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\000\000\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\005\001\006\001\000\000\255\255\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\000\000\255\255\024\001\255\255\026\001\020\001\021\001\
\000\000\030\001\024\001\032\001\005\001\006\001\255\255\000\000\
\009\001\010\001\032\001\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\000\000\255\255\024\001\
\255\255\026\001\000\000\255\255\000\000\030\001\255\255\032\001\
\005\001\006\001\255\255\000\000\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\005\001\006\001\255\255\255\255\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\255\255\030\001\255\255\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\021\001\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\255\255\030\001\255\255\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\021\001\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\255\255\030\001\255\255\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\021\001\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\255\255\030\001\255\255\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\021\001\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\255\255\030\001\255\255\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\021\001\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\255\255\030\001\255\255\032\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\021\001\
\255\255\255\255\024\001\255\255\026\001\255\255\255\255\255\255\
\030\001\255\255\032\001\255\255\255\255\020\001\021\001\255\255\
\255\255\024\001\255\255\026\001\020\001\021\001\255\255\030\001\
\024\001\032\001\026\001\020\001\021\001\255\255\030\001\024\001\
\032\001\255\255\255\255\255\255\255\255\030\001\255\255\032\001\
\255\255\020\001\021\001\255\255\255\255\024\001\020\001\021\001\
\020\001\021\001\024\001\030\001\024\001\032\001\255\255\020\001\
\021\001\255\255\032\001\024\001\032\001\255\255\255\255\255\255\
\001\001\002\001\003\001\032\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\026\001\255\255\255\255\255\255\030\001\031\001\032\001\
\001\001\002\001\003\001\255\255\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\026\001\255\255\255\255\255\255\030\001\031\001\032\001\
\001\001\002\001\003\001\255\255\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\255\255\022\001\255\255\255\255\
\255\255\026\001\255\255\255\255\255\255\030\001\031\001\001\001\
\002\001\003\001\255\255\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\021\001\022\001\255\255\255\255\255\255\
\026\001\255\255\255\255\255\255\030\001\031\001\001\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\022\001\255\255\024\001\255\255\026\001\
\255\255\255\255\255\255\030\001\031\001\001\001\002\001\003\001\
\255\255\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\022\001\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\030\001\031\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\026\001\255\255\255\255\
\255\255\030\001\031\001\001\001\002\001\003\001\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\022\001\255\255\255\255\255\255\026\001\255\255\001\001\002\001\
\003\001\031\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\001\001\002\001\003\001\022\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MUL\000\
  DIV\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 65 "parser.mly"
    ( _2 )
# 534 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
    ( Unit )
# 540 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 69 "parser.mly"
    ( Bool(_1) )
# 547 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 71 "parser.mly"
    ( Int(_1) )
# 554 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 73 "parser.mly"
    ( Float(_1) )
# 561 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 75 "parser.mly"
    ( Var(_1) )
# 568 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 77 "parser.mly"
    ( Get(_1, _4) )
# 576 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 81 "parser.mly"
    ( _1 )
# 583 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 84 "parser.mly"
    ( Not(_2) )
# 590 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 87 "parser.mly"
    ( match _2 with
    | Float(f) -> Float(-.f) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 599 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 91 "parser.mly"
    ( Add(_1, _3) )
# 607 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 93 "parser.mly"
    ( Sub(_1, _3) )
# 615 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 95 "parser.mly"
    ( Mul(_1, _3) )
# 623 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 97 "parser.mly"
    ( Div(_1, _3) )
# 631 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 99 "parser.mly"
    ( Eq(_1, _3) )
# 639 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 101 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 647 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 103 "parser.mly"
    ( Not(LE(_3, _1)) )
# 655 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 105 "parser.mly"
    ( Not(LE(_1, _3)) )
# 663 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 107 "parser.mly"
    ( LE(_1, _3) )
# 671 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 109 "parser.mly"
    ( LE(_3, _1) )
# 679 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
    ( If(_2, _4, _6) )
# 688 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 115 "parser.mly"
    ( FNeg(_2) )
# 695 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 117 "parser.mly"
    ( FAdd(_1, _3) )
# 703 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 119 "parser.mly"
    ( FSub(_1, _3) )
# 711 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 121 "parser.mly"
    ( FMul(_1, _3) )
# 719 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 123 "parser.mly"
    ( FDiv(_1, _3) )
# 727 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 736 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 129 "parser.mly"
    ( LetRec(_3, _5) )
# 744 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 132 "parser.mly"
    ( App(_1, _2) )
# 752 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 134 "parser.mly"
    ( Tuple(_1) )
# 759 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 136 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 768 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 138 "parser.mly"
    ( Put(_1, _4, _7) )
# 777 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 140 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 785 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 143 "parser.mly"
    ( Array(_2, _3) )
# 793 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
 ( failwith
	(Printf.sprintf "parse error near characters %d-%d, L: %d, R: %d"
	   (Parsing.symbol_start ())
	   (Parsing.symbol_end ())
	(!Syntax.count_line)
	((Parsing.symbol_start ()) - !Syntax.symbol_start)) )
# 804 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 154 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 813 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 158 "parser.mly"
    ( addtyp _1 :: _2 )
# 821 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 160 "parser.mly"
    ( [addtyp _1] )
# 828 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 165 "parser.mly"
    ( _1 @ [_2] )
# 836 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 168 "parser.mly"
    ( [_1] )
# 843 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 172 "parser.mly"
    ( _1 @ [_3] )
# 851 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 174 "parser.mly"
    ( [_1; _3] )
# 859 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 178 "parser.mly"
    ( _1 @ [addtyp _3] )
# 867 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 180 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 875 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
