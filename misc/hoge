library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_ARITH.all;
use IEEE.STD_LOGIC_UNSIGNED.all;


entity PROM is

  port (
    clka  : in  std_logic;
--    wea   : in  std_logic_vector(0 downto 0);
    addra : in  std_logic_vector(6 downto 0);
--    dina  : in  std_logic_vector(31 downto 0);
    douta : out std_logic_vector(31 downto 0));

end PROM;

architecture R_rom of PROM is

type rom_type is array (0 to 225) of std_logic_vector(31 downto 0);
  constant rom : rom_type:=(
	-- entry:
"11001100000111100000000000000000",	-- 0: 	lli	%sp, 0
"10100100000111110000000000001111",	-- 1: 	addi	%ra, %r0, halt
"11001100000111011100001101010000",	-- 2: 	lli	%hp, 50000
"11001100000000010000000000000100",	-- 3: 	lli	%r1, 4
"11001100000000100000000000000011",	-- 4: 	lli	%r2, 3
"11001100000000110000000000000010",	-- 5: 	lli	%r3, 2
"11001100000001000000000000000001",	-- 6: 	lli	%r4, 1
"00111111111111100000000000000000",	-- 7: 	sw	%ra, [%sp + 0]
"10100111110111100000000000000001",	-- 8: 	addi	%sp, %sp, 1
"01011000000000000000000001000110",	-- 9: 	jal	f.139
"10101011110111100000000000000001",	-- 10: 	subi	%sp, %sp, 1
"00111011110111110000000000000000",	-- 11: 	lw	%ra, [%sp + 0]
"11001100000000101111111000000011",	-- 12: 	lli	%r2, -509
"11001000000000101111111111111111",	-- 13: 	lhi	%r2, -509
"01010100000000000000000001000001",	-- 14: 	j	g.136
	-- halt:
"11111100000000000000000000000000",	-- 15: 	halt
	-- div10_sub.336:
"11001100000000110000000000001010",	-- 16: 	lli	%r3, 10
"00110000011000010000000000000110",	-- 17: 	bgt	%r3, %r1, bgt_else.363
"11001100000000110000000000001010",	-- 18: 	lli	%r3, 10
"10001000001000110000100000000000",	-- 19: 	sub	%r1, %r1, %r3
"11001100000000110000000000000001",	-- 20: 	lli	%r3, 1
"10000100010000110001000000000000",	-- 21: 	add	%r2, %r2, %r3
"01010100000000000000000000010000",	-- 22: 	j	div10_sub.336
	-- bgt_else.363:
"10000100000000100000100000000000",	-- 23: 	add	%r1, %r0, %r2
"01001111111000000000000000000000",	-- 24: 	jr	%ra
	-- div10.320:
"11001100000000100000000000000000",	-- 25: 	lli	%r2, 0
"01010100000000000000000000010000",	-- 26: 	j	div10_sub.336
	-- print_int.128:
"11001100000000100000000000000000",	-- 27: 	lli	%r2, 0
"00110000010000010000000000011010",	-- 28: 	bgt	%r2, %r1, bgt_else.364
"11001100000000100000000000001010",	-- 29: 	lli	%r2, 10
"00110000010000010000000000010101",	-- 30: 	bgt	%r2, %r1, bgt_else.365
"00111100001111100000000000000000",	-- 31: 	sw	%r1, [%sp + 0]
"00111111111111100000000000000001",	-- 32: 	sw	%ra, [%sp + 1]
"10100111110111100000000000000010",	-- 33: 	addi	%sp, %sp, 2
"01011000000000000000000000011001",	-- 34: 	jal	div10.320
"10101011110111100000000000000010",	-- 35: 	subi	%sp, %sp, 2
"00111011110111110000000000000001",	-- 36: 	lw	%ra, [%sp + 1]
"00111100001111100000000000000001",	-- 37: 	sw	%r1, [%sp + 1]
"00111111111111100000000000000010",	-- 38: 	sw	%ra, [%sp + 2]
"10100111110111100000000000000011",	-- 39: 	addi	%sp, %sp, 3
"01011000000000000000000000011011",	-- 40: 	jal	print_int.128
"10101011110111100000000000000011",	-- 41: 	subi	%sp, %sp, 3
"00111011110111110000000000000010",	-- 42: 	lw	%ra, [%sp + 2]
"11001100000000010000000000001010",	-- 43: 	lli	%r1, 10
"00111011110000100000000000000001",	-- 44: 	lw	%r2, [%sp + 1]
"10001100010000010000100000000000",	-- 45: 	mul	%r1, %r2, %r1
"00111011110000100000000000000000",	-- 46: 	lw	%r2, [%sp + 0]
"10001000010000010000100000000000",	-- 47: 	sub	%r1, %r2, %r1
"11001100000000100000000000110000",	-- 48: 	lli	%r2, 48
"10000100001000100000100000000000",	-- 49: 	add	%r1, %r1, %r2
"01010100000000000000000010101001",	-- 50: 	j	yj_print_char
	-- bgt_else.365:
"11001100000000100000000000110000",	-- 51: 	lli	%r2, 48
"10000100001000100000100000000000",	-- 52: 	add	%r1, %r1, %r2
"01010100000000000000000010101001",	-- 53: 	j	yj_print_char
	-- bgt_else.364:
"11001100000000100000000000101101",	-- 54: 	lli	%r2, 45
"00111100001111100000000000000000",	-- 55: 	sw	%r1, [%sp + 0]
"10000100000000100000100000000000",	-- 56: 	add	%r1, %r0, %r2
"00111111111111100000000000000010",	-- 57: 	sw	%ra, [%sp + 2]
"10100111110111100000000000000011",	-- 58: 	addi	%sp, %sp, 3
"01011000000000000000000010101001",	-- 59: 	jal	yj_print_char
"10101011110111100000000000000011",	-- 60: 	subi	%sp, %sp, 3
"00111011110111110000000000000010",	-- 61: 	lw	%ra, [%sp + 2]
"00111011110000010000000000000000",	-- 62: 	lw	%r1, [%sp + 0]
"10001000000000010000100000000000",	-- 63: 	sub	%r1, %r0, %r1
"01010100000000000000000000011011",	-- 64: 	j	print_int.128
	-- g.136:
"00101000001000100000000000000011",	-- 65: 	bneq	%r1, %r2, bneq_else.366
"11001100000000010000000000000001",	-- 66: 	lli	%r1, 1
"01010100000000000000000000011011",	-- 67: 	j	print_int.128
	-- bneq_else.366:
"11001100000000010000000000000000",	-- 68: 	lli	%r1, 0
"01010100000000000000000000011011",	-- 69: 	j	print_int.128
	-- f.139:
"10000100001000100010100000000000",	-- 70: 	add	%r5, %r1, %r2
"10000100001000110011000000000000",	-- 71: 	add	%r6, %r1, %r3
"10000100001001000011100000000000",	-- 72: 	add	%r7, %r1, %r4
"10000100010000110100000000000000",	-- 73: 	add	%r8, %r2, %r3
"10000100010001000100100000000000",	-- 74: 	add	%r9, %r2, %r4
"10000100011001000101000000000000",	-- 75: 	add	%r10, %r3, %r4
"10000100101001100101100000000000",	-- 76: 	add	%r11, %r5, %r6
"10000100101001110110000000000000",	-- 77: 	add	%r12, %r5, %r7
"10000100101010000110100000000000",	-- 78: 	add	%r13, %r5, %r8
"10000100101010010111000000000000",	-- 79: 	add	%r14, %r5, %r9
"10000100101010100111100000000000",	-- 80: 	add	%r15, %r5, %r10
"10000100110001111000000000000000",	-- 81: 	add	%r16, %r6, %r7
"10000100110010001000100000000000",	-- 82: 	add	%r17, %r6, %r8
"10000100110010011001000000000000",	-- 83: 	add	%r18, %r6, %r9
"10000100110010101001100000000000",	-- 84: 	add	%r19, %r6, %r10
"10000100111010001010000000000000",	-- 85: 	add	%r20, %r7, %r8
"10000100111010011010100000000000",	-- 86: 	add	%r21, %r7, %r9
"10000100111010101011000000000000",	-- 87: 	add	%r22, %r7, %r10
"10000101000010011011100000000000",	-- 88: 	add	%r23, %r8, %r9
"10000101000010101100000000000000",	-- 89: 	add	%r24, %r8, %r10
"10000101001010101100100000000000",	-- 90: 	add	%r25, %r9, %r10
"10000101011011001101000000000000",	-- 91: 	add	%r26, %r11, %r12
"10000101011011011101100000000000",	-- 92: 	add	%r27, %r11, %r13
"00111111011111100000000000000000",	-- 93: 	sw	%r27, [%sp + 0]
"10000101011011101101100000000000",	-- 94: 	add	%r27, %r11, %r14
"00111111011111100000000000000001",	-- 95: 	sw	%r27, [%sp + 1]
"10000101011011111101100000000000",	-- 96: 	add	%r27, %r11, %r15
"00111111011111100000000000000010",	-- 97: 	sw	%r27, [%sp + 2]
"10000101011100001101100000000000",	-- 98: 	add	%r27, %r11, %r16
"00111111011111100000000000000011",	-- 99: 	sw	%r27, [%sp + 3]
"10000101011100011101100000000000",	-- 100: 	add	%r27, %r11, %r17
"00111111011111100000000000000100",	-- 101: 	sw	%r27, [%sp + 4]
"10000101011100101101100000000000",	-- 102: 	add	%r27, %r11, %r18
"00111111011111100000000000000101",	-- 103: 	sw	%r27, [%sp + 5]
"10000101011100111101100000000000",	-- 104: 	add	%r27, %r11, %r19
"00111111011111100000000000000110",	-- 105: 	sw	%r27, [%sp + 6]
"10000101011101001101100000000000",	-- 106: 	add	%r27, %r11, %r20
"00111111011111100000000000000111",	-- 107: 	sw	%r27, [%sp + 7]
"10000101011101011101100000000000",	-- 108: 	add	%r27, %r11, %r21
"00111111011111100000000000001000",	-- 109: 	sw	%r27, [%sp + 8]
"10000101011101101101100000000000",	-- 110: 	add	%r27, %r11, %r22
"00111111011111100000000000001001",	-- 111: 	sw	%r27, [%sp + 9]
"10000101011101111101100000000000",	-- 112: 	add	%r27, %r11, %r23
"00111111011111100000000000001010",	-- 113: 	sw	%r27, [%sp + 10]
"10000101011110001101100000000000",	-- 114: 	add	%r27, %r11, %r24
"00111111011111100000000000001011",	-- 115: 	sw	%r27, [%sp + 11]
"10000101011110011101100000000000",	-- 116: 	add	%r27, %r11, %r25
"10000100001000100000100000000000",	-- 117: 	add	%r1, %r1, %r2
"10000100001000110000100000000000",	-- 118: 	add	%r1, %r1, %r3
"10000100001001000000100000000000",	-- 119: 	add	%r1, %r1, %r4
"10000100001001010000100000000000",	-- 120: 	add	%r1, %r1, %r5
"10000100001001100000100000000000",	-- 121: 	add	%r1, %r1, %r6
"10000100001001110000100000000000",	-- 122: 	add	%r1, %r1, %r7
"10000100001010000000100000000000",	-- 123: 	add	%r1, %r1, %r8
"10000100001010010000100000000000",	-- 124: 	add	%r1, %r1, %r9
"10000100001010100000100000000000",	-- 125: 	add	%r1, %r1, %r10
"10000100001010110000100000000000",	-- 126: 	add	%r1, %r1, %r11
"10000100001011000000100000000000",	-- 127: 	add	%r1, %r1, %r12
"10000100001011010000100000000000",	-- 128: 	add	%r1, %r1, %r13
"10000100001011100000100000000000",	-- 129: 	add	%r1, %r1, %r14
"10000100001011110000100000000000",	-- 130: 	add	%r1, %r1, %r15
"10000100001100000000100000000000",	-- 131: 	add	%r1, %r1, %r16
"10000100001100010000100000000000",	-- 132: 	add	%r1, %r1, %r17
"10000100001100100000100000000000",	-- 133: 	add	%r1, %r1, %r18
"10000100001100110000100000000000",	-- 134: 	add	%r1, %r1, %r19
"10000100001101000000100000000000",	-- 135: 	add	%r1, %r1, %r20
"10000100001101010000100000000000",	-- 136: 	add	%r1, %r1, %r21
"10000100001101100000100000000000",	-- 137: 	add	%r1, %r1, %r22
"10000100001101110000100000000000",	-- 138: 	add	%r1, %r1, %r23
"10000100001110000000100000000000",	-- 139: 	add	%r1, %r1, %r24
"10000100001110010000100000000000",	-- 140: 	add	%r1, %r1, %r25
"10000100001110100000100000000000",	-- 141: 	add	%r1, %r1, %r26
"00111011110000100000000000000000",	-- 142: 	lw	%r2, [%sp + 0]
"10000100001000100000100000000000",	-- 143: 	add	%r1, %r1, %r2
"00111011110000100000000000000001",	-- 144: 	lw	%r2, [%sp + 1]
"10000100001000100000100000000000",	-- 145: 	add	%r1, %r1, %r2
"00111011110000100000000000000010",	-- 146: 	lw	%r2, [%sp + 2]
"10000100001000100000100000000000",	-- 147: 	add	%r1, %r1, %r2
"00111011110000100000000000000011",	-- 148: 	lw	%r2, [%sp + 3]
"10000100001000100000100000000000",	-- 149: 	add	%r1, %r1, %r2
"00111011110000100000000000000100",	-- 150: 	lw	%r2, [%sp + 4]
"10000100001000100000100000000000",	-- 151: 	add	%r1, %r1, %r2
"00111011110000100000000000000101",	-- 152: 	lw	%r2, [%sp + 5]
"10000100001000100000100000000000",	-- 153: 	add	%r1, %r1, %r2
"00111011110000100000000000000110",	-- 154: 	lw	%r2, [%sp + 6]
"10000100001000100000100000000000",	-- 155: 	add	%r1, %r1, %r2
"00111011110000100000000000000111",	-- 156: 	lw	%r2, [%sp + 7]
"10000100001000100000100000000000",	-- 157: 	add	%r1, %r1, %r2
"00111011110000100000000000001000",	-- 158: 	lw	%r2, [%sp + 8]
"10000100001000100000100000000000",	-- 159: 	add	%r1, %r1, %r2
"00111011110000100000000000001001",	-- 160: 	lw	%r2, [%sp + 9]
"10000100001000100000100000000000",	-- 161: 	add	%r1, %r1, %r2
"00111011110000100000000000001010",	-- 162: 	lw	%r2, [%sp + 10]
"10000100001000100000100000000000",	-- 163: 	add	%r1, %r1, %r2
"00111011110000100000000000001011",	-- 164: 	lw	%r2, [%sp + 11]
"10000100001000100000100000000000",	-- 165: 	add	%r1, %r1, %r2
"10000100001110110000100000000000",	-- 166: 	add	%r1, %r1, %r27
"10001000000000010000100000000000",	-- 167: 	sub	%r1, %r0, %r1
"01001111111000000000000000000000",	-- 168: 	jr	%ra
	-- yj_print_char:
"11010000001000000000000000000000",	-- 169: 	sendc	%r1
"01001111111000000000000000000000",	-- 170: 	jr	%ra
	-- yj_create_array:
"11001100000000110000000000000000",	-- 171: 	lli	%r3, 0
	-- yj_create.loop:
"10000111101000110010000000000000",	-- 172: 	add	%r4, %hp, %r3
"00111100010001000000000000000000",	-- 173: 	sw	%r2, [%r4 + 0]
"10100100011000110000000000000001",	-- 174: 	addi	%r3, %r3, 1
"00110000001000111111111111111101",	-- 175: 	bgt	%r1, %r3, yj_create.loop
"10000100000111010000100000000000",	-- 176: 	add	%r1, %r0, %hp
"10000111101000111110100000000000",	-- 177: 	add	%hp, %hp, %r3
"01001111111000000000000000000000",	-- 178: 	jr	%ra
	-- yj_create_float_array:
"11001100000000110000000000000000",	-- 179: 	lli	%r3, 0
	-- yj_create_float.loop:
"10000111101000110010000000000000",	-- 180: 	add	%r4, %hp, %r3
"10110000000001000000000000000000",	-- 181: 	sf	%f0, [%r4 + 0]
"10100100011000110000000000000001",	-- 182: 	addi	%r3, %r3, 1
"00110000001000111111111111111101",	-- 183: 	bgt	%r1, %r3, yj_create_float.loop
"10000100000111010000100000000000",	-- 184: 	add	%r1, %r0, %hp
"10000111101000111110100000000000",	-- 185: 	add	%hp, %hp, %r3
"01001111111000000000000000000000",	-- 186: 	jr	%ra
	-- yj_float_of_int:
"01100000001000000000000000000000",	-- 187: 	itof	%f0, %r1
"01001111111000000000000000000000",	-- 188: 	jr	%ra
	-- yj_int_of_float:
"01100100000000010000000000000000",	-- 189: 	ftoi	%r1, %f0
"01001111111000000000000000000000",	-- 190: 	jr	%ra
	-- yj_sqrt:
"11110000000000000000000000000000",	-- 191: 	sqrt	%f0, %f0
"01001111111000000000000000000000",	-- 192: 	jr	%ra
	-- yj_floor:
"11110100000000000000000000000000",	-- 193: 	floor	%f0, %f0
"01001111111000000000000000000000",	-- 194: 	jr	%ra
	-- yj_read_int:
"11001100000000010000000000000000",	-- 195: 	lli	%r1, 0
"11001100000000100000000000000000",	-- 196: 	lli	%r2, 0
"11000100000000010000000000000000",	-- 197: 	recv	%r1
"01001000001000010000000000001000",	-- 198: 	sll	%r1, %r1, 8
"11000100000000100000000000000000",	-- 199: 	recv	%r2
"10011100001000100000100000000000",	-- 200: 	xor	%r1, %r1, %r2
"01001000001000010000000000001000",	-- 201: 	sll	%r1, %r1, 8
"11000100000000100000000000000000",	-- 202: 	recv	%r2
"10011100001000100000100000000000",	-- 203: 	xor	%r1, %r1, %r2
"01001000001000010000000000001000",	-- 204: 	sll	%r1, %r1, 8
"11000100000000100000000000000000",	-- 205: 	recv	%r2
"10011100001000100000100000000000",	-- 206: 	xor	%r1, %r1, %r2
"01001111111000000000000000000000",	-- 207: 	jr	%ra
	-- yj_read_float:
"11001100000000010000000000000000",	-- 208: 	lli	%r1, 0
"11001100000000100000000000000000",	-- 209: 	lli	%r2, 0
"11000100000000010000000000000000",	-- 210: 	recv	%r1
"01001000001000010000000000001000",	-- 211: 	sll	%r1, %r1, 8
"11000100000000100000000000000000",	-- 212: 	recv	%r2
"10011100001000100000100000000000",	-- 213: 	xor	%r1, %r1, %r2
"01001000001000010000000000001000",	-- 214: 	sll	%r1, %r1, 8
"11000100000000100000000000000000",	-- 215: 	recv	%r2
"10011100001000100000100000000000",	-- 216: 	xor	%r1, %r1, %r2
"01001000001000010000000000001000",	-- 217: 	sll	%r1, %r1, 8
"11000100000000100000000000000000",	-- 218: 	recv	%r2
"10011100001000100000100000000000",	-- 219: 	xor	%r1, %r1, %r2
"01111100001000000000000000000000",	-- 220: 	movi2f	%f0, %r1
"01001111111000000000000000000000",	-- 221: 	jr	%ra
	-- yj_fabs:
"11111000000000000000000000000000",	-- 222: 	absf	%f0, %f0
"01001111111000000000000000000000",	-- 223: 	jr	%ra
	-- yj_fneg:
"00011000000000000000000000000000",	-- 224: 	negf	%f0, %f0
"01001111111000000000000000000000"	-- 225: 	jr	%ra
);

signal shortened : std_logic_vector(6 downto 0):=(others=>'0');
begin  -- R_rom
  shortened<=addra(6 downto 0);
    douta<=rom(conv_integer(shortened));
end R_rom;
